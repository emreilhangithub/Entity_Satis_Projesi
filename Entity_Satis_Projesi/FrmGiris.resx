<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAACZ/gAAm/0AAJz9AAK29wAAAAAAAAAAAAAAAAAAAAAAX8EAAF/BAABdvwABYMQAAGHF
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAACV/wAAlf8AAJX/GACV/2IBo/yQAav7SAGp+wsMrdsAaMcAAFiyAB5XsgBlV7EAmFex
        AKVXsQCLV7EATVewAA5XsQAAV7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAACV/wAAlf8CAJX/JQCV/3kAlf/QAJX/+wGj/P8Bq/v0Aav7uQOr9ltQsRZeV7EA01ex
        AP1ZtQD/W7oA/1y7AP9buQD3WbUAsVexACxatwAAUaYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAJP/AACV/wAAlf8GAJX/NwCV/5EAlf/gAJX//gCV//8Alf//AaP8/wGr+/8Aq/3/H62l+lOx
        CvdZtAD/X8EA/2LLAP9lzgD/Zs8A/2XOAP9jyQD/XsAAyVu4ACRcugAAPH8AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAJX/AACV/wAAlf8NAJX/SwCV/6gAlf/sAJX//wCV//8Alf//AJX//wCV//8Bo/z/AKv9/wus
        3v9IsCz/WbQA/2HGAP9p0Af/iNc6/3PSFv9lzwD/Zs8A/2bPAP9lzgD/Y8oAlmXLAANlzQAAAAAAAAAA
        AAAAAAAAAJX/AACV/wAAlf8YAJX/YQCV/70Alf/1AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wGj
        /P8Aq///I66Y/1exAf9fwQD/adAF/6bebf/r7uH/xeWh/3PSF/9lzwD/Zs8A/2bPAP9mzwDiZs8AJWbP
        AAAAAAAAAAAAAACV/wAAlf8TAJX/dwCV/9AAlf/7AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV
        //8Alf//AaP8/wGr/P80r2b/W7UA/2PLAP+f3GD/5u3Z/7nijf/c6sj/xuWj/3PSF/9lzwD/Zs8A/2bP
        APpmzwBMZs8AAAAAAAAAAAAAAJX/AACV/1QAlf/7AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV
        //8Alf//AJX//wCV//8Bo/3/Aav6/zivWv9dugD/Zc4A/5baUf+f3GD/aM8F/4jXO//e68v/xuWj/3TS
        GP9lzwD/Zs8A/WbPAFdmzwAAAAAAAAAAAAAAlf8AAJX/WwCV//4Alf//AJX//wCV//8Alf//AJX//wCV
        //8Alf//AJX//wCV//8Alf//AJX//wGj/P8Aq/3/MK5z/127AP9mzwD/Zc8A/2XPAP9mzwD/Zc8A/4nX
        O//d68r/ruB5/2XPAP9mzwD1Zs8AQWbPAAAAAAAAAAAAAACV/wAAlf9aAJX//gCV//8Alf//AJX//wCV
        //8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AaP8/wCr//8brbD/WLgI/2bOAP9mzwD/Zs8A/2bP
        AP9mzwD/Zc8A/3/VK/9/1Sr/Zs8A/2bPANBmzwAXZs8AAAAAAAAAAAAAAJX/AACV/1oAlf/+AJX//wCV
        //8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV//8Bo/z/Aav8/wWr7/8+sk3/ZMkA/2bP
        AP9mzwD/Zs8A/2bPAP9mzwD/Zc8A/2XPAP9nzwH7Zc8CbmPOCABmzwAAAAAAAAAAAAAAlf8AAJX/WgCV
        //4Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wGj/P8Bq/v/AKv9/xCs
        0P9LuzX/Z84A/2fPAP9mzwD/Zs8A/2bPAP9nzwD/ZM4G/0PDVuMkuKMjJ7icAAAAAAAAAAAAAAAAAACV
        /wAAlf9aAJX//gCV//8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AaP8/wGr
        +/8Bq/v/AKv9/w2t2P87vWf/W8sb/2TOBf9lzwL/Ys4J/1TJLf8supD/Bq3u4ACp/x8Aqv8AAAAAAAAA
        AAAAAAAAAJX/AACV/1oAlf/+AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV
        //8Bo/z/Aav7/wGr+/8Bq/v/AKv9/wKr+P8QsNb/H7aw/yS4pf8btLr/Cq7k/wGr/f8Bq/zgAav7HwGr
        +wAAAAAAAAAAAAAAAAAAlf8AAJX/WgCV//4Alf//AJX//wCV//8Alf//AJX//wCV//8Alf//AJX//wCV
        //8Alf//AJX//wGj/P8Bq/v/Aav7/wGr+/8Bq/v/Aav7/wCr/f8Aqv//AKr//wCq//8Aq/z/Aav7/wGr
        ++ABq/sfAav7AAAAAAAAAAAAAAAAAACV/wAAlf9aAJX//gCV//8Alf//AJX//wCV//8Alf//AJX//wCV
        //8Alf//AJX//wCV//8Alf//AaP8/wGr+/8Bq/v/Aav7/wGr+/8Bq/v/Aav7/wGr+/8Bq/v/Aav7/wGr
        +/8Bq/v/Aav74AGr+x8Bq/sAAAAAAAAAAAAAAAAAAJX/AACV/1oAlf/+AJX//wCV//8Alf//AJX//wCV
        //8Alf//AJX//wCV//8Alf//AJX//wCa/v8Bq/z/Aa37/wGr+/8Bq/v/Aav7/wGr+/8Bq/v/Aav7/wGr
        +/8Bq/v/Aav7/wGr+/8Bq/vgAav7HwGr+wAAAAAAAAAAAAAAAAAAlf8AAJX/WgCV//4Alf//AJX//wCV
        //8Alf//AJX//wCV//8AlP//AJX//wCd/v8ArPz/ALr7/wDA+v8AvPr/AbT7/wGt+/8Bq/v/Aav7/wGr
        +/8Bq/v/Aav7/wGr+/8Bq/v/Aav7/wGr++ABq/sfAav7AAAAAAAAAAAAAAAAAACV/wAAlf9aAJX//gCV
        //8Alf//AJX//wCV//8AlP//AJb//wCg/v8AsPz/AL36/wDC+v8Awfr/AMH6/wDB+v8Awfr/AL36/wG2
        +/8Brvv/Aav7/wGr+/8Bq/v/Aav7/wGr+/8Bq/v/Aav74AGr+x8Bq/sAAAAAAAAAAAAAAAAAAJX/AACV
        /1oAlf/+AJX//wCV//8AlP//AJj//wCf/v8Bpfz/AbL7/wC9+v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDB
        +v8Awfr/AMH6/wC++v8AuPr/AbD7/wGs+/8Bq/v/Aav7/wGr+/8Bq/vgAav7HwGr+wAAAAAAAAAAAAAA
        AAAAlf8AAJX/WgCV//4Alf//AJr+/wCo/f8At/v/AL36/wG3+v8Br/v/Aa37/wGz+/8Au/r/AMD6/wDB
        +v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDB+v8Av/r/ALr6/wGy+/8BrPv/Aav7/wGr++ABq/sfAav7AAAA
        AAAAAAAAAAAAAACY/wAAl/9aAJ3+/gCs/P8Auvv/AMH6/wDC+v8Awfr/AMH6/wC/+v8AuPr/AbD7/wGt
        +/8Bsfv/ALn6/wC/+v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDB+v8Awfr/AMD6/wC8+v8BtPv/Aa774AGr
        +x4BrPsAAAAAAAAAAAAAAAAAAK78AACr/SwAu/u8AMH69gDB+v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDB
        +v8AwPr/ALr6/wGy+/8Brfv/Aa/7/wC3+v8Avvr/AMH6/wDB+v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDA
        +uwAu/qTAbD7DAGy+wAAAAAAAAAAAAAAAAAA2/cAAK/8AADB+g4AwPpNAMD6qgDB+u0Awfr/AMH6/wDB
        +v8Awfr/AMH6/wDB+v8Awfr/AMD6/wC8+v8BtPv/Aa77/wGu+/8Btfv/AL36/wDB+v8Awfr/AMH6/gDB
        +t4AwPqNAMD6NADB+gUAv/oAANz6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKv9AAC/+gAAvfoHAL/6OQDA
        +pMAwfrhAMH6/gDB+v8Awfr/AMH6/wDB+v8Awfr/AMH6/wDB+v8Avvr/Abb7/wGv+/8Brfv/AbP7+gC9
        +s4AwPp1AL/6IwC7+gIAvfoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAvfoAALv6AgC/+icAwPp7AMH60gDB+vsAwfr/AMH6/wDB+v8Awfr/AMH6/wDB+v8Awfr/AL/69AC1
        +roBq/teAa/7FgD/9QAAu/sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAALv6AACy+wAAv/oZAMD6YwDB+r8Awfr2AMH6/wDB+v8Awfr/AMH66wDA
        +qQAwPpIAMT6DAC4+gAA3fkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3+wAAxfkAAL76DgDA+k0AwPqrAMH60wDA
        +o4AwPo0AL36BQC/+gAAqP0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq/0AAL/6AAC+
        +ggAv/oVAL36AwC9+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////7///gwH//AAA//AAAH/AAAA/AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB+AA
        AA/4AAA//gAB///AB///8B////x///////8=
</value>
  </data>
</root>